package com.utc.utrc.hermes.iml.gen.nusmv.df.tests

import org.junit.runner.RunWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.InjectWith
import com.utc.utrc.hermes.iml.tests.ImlInjectorProvider
import com.google.inject.Inject
import com.utc.utrc.hermes.iml.ImlParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import com.utc.utrc.hermes.iml.tests.TestHelper
import org.junit.Test
import com.utc.utrc.hermes.iml.util.FileUtil
import com.utc.utrc.hermes.iml.iml.Model
import com.utc.utrc.hermes.iml.gen.nusmv.systems.Systems
import com.utc.utrc.hermes.iml.gen.nusmv.generator.Configuration
import com.utc.utrc.hermes.iml.gen.nusmv.generator.NuSmvGenerator
import com.utc.utrc.hermes.iml.gen.nusmv.sms.Sms
import com.utc.utrc.hermes.iml.gen.nusmv.model.NuSmvModel
import com.utc.utrc.hermes.iml.iml.NamedType
import com.utc.utrc.hermes.iml.util.ImlUtil
import com.utc.utrc.hermes.iml.custom.ImlCustomFactory
import com.utc.utrc.hermes.iml.gen.nusmv.generator.NuSmvGeneratorServices
import com.utc.utrc.hermes.iml.gen.nusmv.df.SynchDf
import com.utc.utrc.hermes.iml.gen.nusmv.df.generator.LustreGenerator
import com.utc.utrc.hermes.iml.gen.nusmv.df.generator.LustreGeneratorServices
import com.utc.utrc.hermes.iml.gen.nusmv.df.model.LustreModel
import com.utc.utrc.hermes.iml.iml.Import
import com.utc.utrc.hermes.iml.gen.nusmv.df.Node
import org.eclipse.xtext.EcoreUtil2

@RunWith(XtextRunner)
@InjectWith(ImlInjectorProvider)
class LustreTranslatorTests {
	
	@Inject extension ImlParseHelper
	
	@Inject extension ValidationTestHelper
	
	@Inject extension TestHelper
	
	@Inject 
	Systems sys ;
	
	@Inject 
	SynchDf sdf ;
	
	@Inject
	LustreGenerator gen ;
	
	@Test
	def void testFilter() {
		
		var Model m = parse(FileUtil.readFileContent("models/synchdf/filter.iml"),true) ;
		sys.process(m) ;
		sdf.systems = sys;
		sdf.process(m);
		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("Filter") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
		System.out.println(output);
			
	}
	
	@Test
	def void testSW() {
		
		var Model m = parse(FileUtil.readFileContent("models/synchdf/SW.iml"),true) ;
		sys.process(m) ;
		sdf.systems = sys;
		sdf.process(m);
		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("MC_SW_dot_Impl") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
		System.out.println(output);
	}
	
	@Test
	def void testSWAgree() {
		
		var Model m = parse(FileUtil.readFileContent("models/synchdf/SW_agree.iml"),true) ;
		sys.process(m) ;
		sdf.systems = sys;
		sdf.process(m);
		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("MC_SW_dot_Impl") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
		System.out.println(output);
	}

	@Test
	def void testSWAgreeImlAutoGenerated() {
		
		var Model m = parse(FileUtil.readFileContent("models/synchdf/SW_agree_imlAutoGenerated_v2.iml"),true) ;
//		var Model m = parse(FileUtil.readFileContent("models/synchdf/SW_Dec04_2019.IML"),true) ;
		sys.process(m) ;
		sdf.systems = sys;
		sdf.process(m);
		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("MC_SW_dot_Impl") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
//		gen.displayMapLustre2Iml();
		System.out.println(output);
	}	


	@Test
	def void testUTRC_Explain_yes() {
		
		var Model m = parse(FileUtil.readFileContent("models/synchdf/UTRC_Explain_yes.iml"),true) ;
		sys.process(m) ;
		sdf.systems = sys;
		sdf.process(m);
		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("top_level_dot_Impl") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
//		gen.displayMapLustre2Iml();
		System.out.println(output);
	}	
	
	@Test
	def void testUTRC_ExternalOutAlsoUsedAsInternalIn() {
		
		var Model m = parse(FileUtil.readFileContent("models/synchdf/testExternalOutAlsoUsedAsInternalIn.iml"),true) ;
		sys.process(m) ;
		sdf.systems = sys;
		sdf.process(m);
		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("top_level_dot_Impl") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
		System.out.println(output);
	}	

	@Test
	def void testUTRC_DanglingInternalOut() {
		
		var Model m = parse(FileUtil.readFileContent("models/synchdf/testDanglingInternalOut.iml"),true) ;
		m.assertNoErrors;
		sys.process(m) ;
		sdf.systems = sys;
		sdf.process(m);
		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("top_level_dot_Impl") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
		System.out.println(output);
	}	

	@Test
	def void testSWAgreeImlDeliveryDrone() {
		
		var mList = newArrayList();
		
		//var Model m = parse(FileUtil.readFileContent("models/agree/DeliveryDrone.iml"),true) ;
		var rs = parseDir("models/agree",true) ;
		var Model m = rs.resources.map[it.contents.get(0) as Model].findFirst[it.name == "agree.DeliveryDrone"]
		m.assertNoErrors;
		mList.add(m);
		
		for (Import i : m.imports) {
			val String nm = i.importedNamespace.replace(".*", "");
			val mi = rs.resources.map[it.contents.get(0) as Model].findFirst[it.name == nm]
			mi.assertNoErrors;
			mList.add(mi);
		}
		
//		EcoreUtil2.getContainerOfType(ele, NamedType)
		
		for (Model mi : mList) {
			sys.process(mi) ;			
		}

		sdf.systems = sys;
		
		for (Model mi : mList) {
			sdf.process(mi);			
		}		

		gen.sdf = sdf;
		var NamedType nodetype = m.findSymbol("DeliveryDroneSystem_dot_Impl") as NamedType;
		var LustreModel lus = new LustreModel() ;
		gen.generateLustreNode(lus,sdf.getNode(ImlCustomFactory.INST.createSimpleTypeReference(nodetype))) ;
		var output = gen.serialize(lus);
		System.out.println(output);
	}	

}

