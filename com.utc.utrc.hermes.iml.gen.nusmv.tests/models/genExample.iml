package Model;

import iml.systems.*;
import iml.software.*;
import iml.synchdf.ontological.*;
import iml.contracts.*;

type B exhibits (Contract, System, Component, Synchronous){
	 x2:InDataPort<Real>;
	 y2:InDataPort<Real>;
	 z2:OutDataPort<Real>;
	[Guarantee { 	
		comment="A1";
	}] A1REQ:Bool:=z2.data=x2.data+y2.data+1.0;
}
type A exhibits (Contract, System, Component, Synchronous){
	 x1:InDataPort<Real>;
	 y1:OutDataPort<Real>;
	[Guarantee { 	
		comment="G1";
	}] G1REQ:Bool:=y1.data>x1.data;
}
type C exhibits (Contract, System, Component, Synchronous){
	 my_a1:A;
	 my_a2:A;
	 my_b:B;
	 x3:InDataPort<Real>;
	 z3:OutDataPort<Real>;
	 y3:InDataPort<Real>;
	[Guarantee { 	
		comment="G2";
	}] G2REQ:Bool:=z3.data>x3.data;
	 c0:Connector<InDataPort<Real>, InDataPort<Real>>:=connect<InDataPort<Real>, InDataPort<Real>>(x3, my_a1.x1);
	 c1:Connector<InDataPort<Real>, InDataPort<Real>>:=connect<InDataPort<Real>, InDataPort<Real>>(y3, my_a2.x1);
	 c2:Connector<OutDataPort<Real>, InDataPort<Real>>:=connect<OutDataPort<Real>, InDataPort<Real>>(my_a1.y1, my_b.x2);
	 c3:Connector<OutDataPort<Real>, OutDataPort<Real>>:=connect<OutDataPort<Real>, OutDataPort<Real>>(my_b.z2, z3);
	 c4:Connector<OutDataPort<Real>, InDataPort<Real>>:=connect<OutDataPort<Real>, InDataPort<Real>>(my_a2.y1, my_b.y2);
}
type Point{
	 x:Int;
	 y:Int;
}

