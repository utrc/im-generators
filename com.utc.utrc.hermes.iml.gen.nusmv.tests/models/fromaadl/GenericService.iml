package GenericServiceEvents_pkg ;

import UxASNodeLibEvents.* ;
import iml.software.* ;
import iml.ports.* ;
import iml.connectivity.* ;
import iml.contracts.*;

type [Thread] GenericService {
	[Input] CmdRequest_in: EventDataPort<Bool>;
	[Output] CmdResponse_out: EventDataPort<Bool>;
    	    
	[Output] SubRequest_out: EventDataPort<Bool>;
	[Input] SubResponse_in: EventDataPort<Bool>;
	
	processing_path0 : FlowPath ;
	assert {processing_path0.start = CmdRequest_in.flowpoint && processing_path0.end = SubRequest_out.flowpoint};
	
	processing_path1 : FlowPath ;
	assert {processing_path1.start = SubResponse_in.flowpoint && processing_path1.end = CmdResponse_out.flowpoint};
	
	g1monitor : responds_once ;
	c1 : Connector < Bool > := 	connect<Bool>(CmdRequest_in.event,g1monitor.b);
	c2 : Connector < Bool > := 	connect<Bool>(SubRequest_out.event,g1monitor.a);
	
	g2monitor : responds_once ;
	c3 : Connector < Bool > := 	connect<Bool>(SubResponse_in.event,g2monitor.b);
	c4 : Connector < Bool > := 
	connect<Bool>(CmdResponse_out.event,g2monitor.a);
	
	d1 : iml.ports.delay ;
	c5 : Connector < FlowPath > := connect<FlowPath>(processing_path0,d1.f);
	c6 : Connector < Int > := connect<Int>(1,d1.n);
	
	d2 : iml.ports.delay ;
	c7 : Connector < FlowPath > := connect<FlowPath>(processing_path1,d2.f);
	c8 : Connector < Int > := connect<Int>(1,d2.n);
	
	[Guarantee,Output] g : Bool := {g1monitor.holds && g2monitor.holds && d1.holds && d2.holds};

	
}