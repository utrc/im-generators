package agree;
import iml.systems.*;
import iml.software.*;
import iml.synchdf.ontological.*;
import iml.contracts.*;
 
type Map_dot_Impl   exhibits(MapTrait){
    wp1 : Coordinate_dot_Impl;
    wp2 : Coordinate_dot_Impl;
    wp3 : Coordinate_dot_Impl;
    wp4 : Coordinate_dot_Impl;
};

type WaypointManager_dot_Impl   exhibits(WaypointManagerTrait){
};

trait FlightPlannerTrait  refines(Synchronous, Component, Thread) {
    flight_plan: OutDataPort<Mission_dot_Impl>;
    recv_map: InEventDataPort<Bool, Command_dot_Impl>;
    position_status: InEventDataPort<Bool, Coordinate_dot_Impl>;
    Req001_FlightPlanner : Bool := good_command(recv_map.data);
    
    Req002_FlightPlanner : Bool := (recv_map.data.HMAC) = (true);
    
    Req003_FlightPlanner : Bool := good_mission(flight_plan.data);
    
            
    assumption: Bool := Req001_FlightPlanner && Req002_FlightPlanner;
    
    guarantee: Bool := Req003_FlightPlanner;
    
            
};

type FlightPlanner  exhibits(FlightPlannerTrait);
good_coordinate : (Coordinate_dot_Impl) -> Bool := fun (coord: Coordinate_dot_Impl){
     ((((((coord.lat) >= (90)) && ((coord.lat) <= (90))) && ((coord.long) >= (180))) && ((coord.long) <= (180))) && ((coord.alt) >= (0))) && ((coord.alt) <= (15000))
};

good_map : (Map_dot_Impl) -> Bool := fun (map: Map_dot_Impl){
     (((good_coordinate(map.wp1)) && (good_coordinate(map.wp2))) && (good_coordinate(map.wp3))) && (good_coordinate(map.wp4))
};

good_pattern : FlightPattern -> Bool :=    fun(pattern : FlightPattern) {
    ((pattern = FlightPattern.ZigZag) || (pattern = FlightPattern.StraightLine) || (pattern = FlightPattern.Perimeter))} ;

good_HMAC : (Bool) -> Bool := fun (hmac: Bool){
     ((hmac) = (true)) || ((hmac) = (false))
};

good_command : (Command_dot_Impl) -> Bool := fun (cmd: Command_dot_Impl){
     ((good_map(cmd.Map)) && (good_pattern(cmd.Pattern))) && (good_HMAC(cmd.HMAC))
};

good_mission : (Mission_dot_Impl) -> Bool := fun (mission: Mission_dot_Impl){
     (((((((((good_coordinate(mission.wp1)) && (good_coordinate(mission.wp2))) && (good_coordinate(mission.wp3))) && (good_coordinate(mission.wp4))) && (good_coordinate(mission.wp5))) && (good_coordinate(mission.wp6))) && (good_coordinate(mission.wp7))) && (good_coordinate(mission.wp8))) && (good_coordinate(mission.wp9))) && (good_coordinate(mission.wp10))
};

good_mission_window : (MissionWindow_dot_Impl) -> Bool := fun (win: MissionWindow_dot_Impl){
     (((good_coordinate(win.wp1)) && (good_coordinate(win.wp2))) && (good_coordinate(win.wp3))) && (good_coordinate(win.wp4))
};

        
        
type RadioDriver_dot_Impl   exhibits(RadioDriverTrait){
};

type UARTDriver_dot_Impl   exhibits(UARTDriverTrait){
};

trait RadioDriverTrait  refines(Synchronous, Component, Thread) {
    recv_map_in: InEventDataPort<Bool, Command_dot_Impl>;
    send_status_out: OutEventDataPort<Bool, Coordinate_dot_Impl>;
    send_status_in: InEventDataPort<Bool, Coordinate_dot_Impl>;
    recv_map_out: OutEventDataPort<Bool, Command_dot_Impl>;
    Req001_RadioDriver : Bool := (recv_map_in.data.HMAC) = (true);
    
    Req002_RadioDriver : Bool := (recv_map_out.data.HMAC) = (true);
    
            
    assumption: Bool := Req001_RadioDriver;
    
    guarantee: Bool := Req002_RadioDriver;
    
            
};

type RadioDriver  exhibits(RadioDriverTrait);
type Command_dot_Impl   exhibits(CommandTrait){
    Map : Map_dot_Impl;
    Pattern : FlightPattern;
    HMAC : Bool;
};

trait CoordinateTrait  refines(Data) {
};

type Coordinate  exhibits(CoordinateTrait);
type MC_SW_dot_Impl   exhibits(MC_SWTrait){
    RADIO : RadioDriver_dot_Impl;
    FPLN : FlightPlanner_dot_Impl;
    WPM : WaypointManager_dot_Impl;
    UART : UARTDriver_dot_Impl;
    c1 : Connector<InEventDataPort<Bool, Command_dot_Impl>, InEventDataPort<Bool, Command_dot_Impl>> := connect<InEventDataPort<Bool, Command_dot_Impl>, InEventDataPort<Bool, Command_dot_Impl>>(recv_map, RADIO.recv_map_in);
    assert{recv_map.data = RADIO.recv_map_in.data};
    assert{recv_map.event = RADIO.recv_map_in.event};
    c2 : Connector<OutEventDataPort<Bool, Coordinate_dot_Impl>, OutEventDataPort<Bool, Coordinate_dot_Impl>> := connect<OutEventDataPort<Bool, Coordinate_dot_Impl>, OutEventDataPort<Bool, Coordinate_dot_Impl>>(RADIO.send_status_out, send_status);
    assert{RADIO.send_status_out.data = send_status.data};
    assert{RADIO.send_status_out.event = send_status.event};
    c3 : Connector<OutEventDataPort<Bool, Command_dot_Impl>, InEventDataPort<Bool, Command_dot_Impl>> := connect<OutEventDataPort<Bool, Command_dot_Impl>, InEventDataPort<Bool, Command_dot_Impl>>(RADIO.recv_map_out, FPLN.recv_map);
    assert{RADIO.recv_map_out.data = FPLN.recv_map.data};
    assert{RADIO.recv_map_out.event = FPLN.recv_map.event};
    c5 : Connector<OutDataPort<Mission_dot_Impl>, InDataPort<Mission_dot_Impl>> := connect<OutDataPort<Mission_dot_Impl>, InDataPort<Mission_dot_Impl>>(FPLN.flight_plan, WPM.flight_plan);
    assert{FPLN.flight_plan.data = WPM.flight_plan.data};
    c6 : Connector<OutEventDataPort<Bool, MissionWindow_dot_Impl>, InEventDataPort<Bool, MissionWindow_dot_Impl>> := connect<OutEventDataPort<Bool, MissionWindow_dot_Impl>, InEventDataPort<Bool, MissionWindow_dot_Impl>>(WPM.waypoint, UART.waypoint_in);
    assert{WPM.waypoint.data = UART.waypoint_in.data};
    assert{WPM.waypoint.event = UART.waypoint_in.event};
    c7 : Connector<OutEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>> := connect<OutEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>>(UART.position_status_out, WPM.position_status);
    assert{UART.position_status_out.data = WPM.position_status.data};
    assert{UART.position_status_out.event = WPM.position_status.event};
    c8 : Connector<OutEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>> := connect<OutEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>>(UART.position_status_out, FPLN.position_status);
    assert{UART.position_status_out.data = FPLN.position_status.data};
    assert{UART.position_status_out.event = FPLN.position_status.event};
    c9 : Connector<OutEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>> := connect<OutEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>>(UART.position_status_out, RADIO.send_status_in);
    assert{UART.position_status_out.data = RADIO.send_status_in.data};
    assert{UART.position_status_out.event = RADIO.send_status_in.event};
    c10 : Connector<OutEventDataPort<Bool, MissionWindow_dot_Impl>, OutEventDataPort<Bool, MissionWindow_dot_Impl>> := connect<OutEventDataPort<Bool, MissionWindow_dot_Impl>, OutEventDataPort<Bool, MissionWindow_dot_Impl>>(UART.waypoint_out, waypoint);
    assert{UART.waypoint_out.data = waypoint.data};
    assert{UART.waypoint_out.event = waypoint.event};
    c11 : Connector<InEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>> := connect<InEventDataPort<Bool, Coordinate_dot_Impl>, InEventDataPort<Bool, Coordinate_dot_Impl>>(position_status, UART.position_status_in);
    assert{position_status.data = UART.position_status_in.data};
    assert{position_status.event = UART.position_status_in.event};
};

type Coordinate_dot_Impl   exhibits(CoordinateTrait){
    lat : Int;
    long : Int;
    alt : Int;
};

type FlightPlanner_dot_Impl   exhibits(FlightPlannerTrait){
};

type Mission_dot_Impl   exhibits(MissionTrait){
    wp1 : Coordinate_dot_Impl;
    wp2 : Coordinate_dot_Impl;
    wp3 : Coordinate_dot_Impl;
    wp4 : Coordinate_dot_Impl;
    wp5 : Coordinate_dot_Impl;
    wp6 : Coordinate_dot_Impl;
    wp7 : Coordinate_dot_Impl;
    wp8 : Coordinate_dot_Impl;
    wp9 : Coordinate_dot_Impl;
    wp10 : Coordinate_dot_Impl;
};

trait MissionWindowTrait  refines(Data) {
};

type MissionWindow  exhibits(MissionWindowTrait);
trait UARTDriverTrait  refines(Synchronous, Component, Thread) {
    position_status_in: InEventDataPort<Bool, Coordinate_dot_Impl>;
    waypoint_out: OutEventDataPort<Bool, MissionWindow_dot_Impl>;
    position_status_out: OutEventDataPort<Bool, Coordinate_dot_Impl>;
    waypoint_in: InEventDataPort<Bool, MissionWindow_dot_Impl>;
    Req001_UARTDriver : Bool := good_mission_window(waypoint_in.data);
    
    Req002_UARTDriver : Bool := (waypoint_out.data.crc) = (true);
    
            
    assumption: Bool := Req001_UARTDriver;
    
    guarantee: Bool := Req002_UARTDriver;
    
            
};

type UARTDriver  exhibits(UARTDriverTrait);
type MissionWindow_dot_Impl   exhibits(MissionWindowTrait){
    wp1 : Coordinate_dot_Impl;
    wp2 : Coordinate_dot_Impl;
    wp3 : Coordinate_dot_Impl;
    wp4 : Coordinate_dot_Impl;
    crc : Bool;
};

trait CommandTrait  refines(Data) {
};

type Command  exhibits(CommandTrait);
trait MC_SWTrait  refines(Synchronous, Process, Component) {
    recv_map: InEventDataPort<Bool, Command_dot_Impl>;
    send_status: OutEventDataPort<Bool, Coordinate_dot_Impl>;
    waypoint: OutEventDataPort<Bool, MissionWindow_dot_Impl>;
    position_status: InEventDataPort<Bool, Coordinate_dot_Impl>;
    Req001_MC_SW : Bool := (recv_map.data.HMAC) = (true);
    
    Req002_MC_SW : Bool := (recv_map.data.HMAC) = (true);
    
    Req003_MC_SW : Bool := (waypoint.data.crc) = (true);
    
            
    assumption: Bool := Req001_MC_SW && Req002_MC_SW;
    
    guarantee: Bool := Req003_MC_SW;
    
            
};

type MC_SW  exhibits(MC_SWTrait);
type FlightPattern exhibits(Data) enum{
    ZigZag,
    StraightLine,
    Perimeter
};

trait WaypointManagerTrait  refines(Synchronous, Component, Thread) {
    flight_plan: InDataPort<Mission_dot_Impl>;
    waypoint: OutEventDataPort<Bool, MissionWindow_dot_Impl>;
    position_status: InEventDataPort<Bool, Coordinate_dot_Impl>;
    Req001_WaypointManager : Bool := good_mission(flight_plan.data);
    
    Req002_WaypointManager : Bool := good_mission_window(waypoint.data);
    
            
    assumption: Bool := Req001_WaypointManager;
    
    guarantee: Bool := Req002_WaypointManager;
    
            
};

type WaypointManager  exhibits(WaypointManagerTrait);
trait MapTrait  refines(Data) {
};

type Map  exhibits(MapTrait);
trait MissionTrait  refines(Data) {
};

type Mission  exhibits(MissionTrait);