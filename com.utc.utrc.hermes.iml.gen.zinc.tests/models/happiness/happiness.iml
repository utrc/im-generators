package optimization.happiness ;
import iml.queries.*;

/*Example taken from https://www.cs.cmu.edu/~avrim/451f11/lectures/lect1101.pdf */

type WeekHours {
	// Study
	s : Int;
	// Party 
	p : Int ;
	// Everything else
	e : Int;
	
	//Total number of hours in a week
	assert {s + p + e = 168} ;
	//Survival constraint
	assert { e >= 56} ;
	//Sanity constraint
	assert {p + e >= 70} ;
	//Passing classes
	assert {s >= 60} ;
	//Study inefficiently if not sleeping enough or partying too much
	assert {2*s + e - 3*p >= 150} ;
	//Number of hours partying is positive
	assert { p >= 0};
}

//type Test {
//	X : WeekHours;
//	Y : (WeekHours, WeekHours) -> (Real, WeekHours):=fun(x:WeekHours,y:WeekHours){(x.e, y)};
//}

//happiness function
//happiness == fun_unique_form
//IntVar fun_unique_form == 2*x.p + x.e
happiness : WeekHours -> Real := 
	fun(x:WeekHours) { 
		2*x.p + x.e
	};

optimalWeek : WeekHours := max<WeekHours>(happiness);

//x1: T1; // SimpleTypeReference, x1 = x2[1]
//x2: T1[10]; // ArrayType, x2[1]
//x3: T1 -> Int; // FunctionType. x3(x1)
//x4: (T1, b: Int); // TupleType, x4[1], x4.b
//x5: {a: T1, b: Int}; // RecordType


